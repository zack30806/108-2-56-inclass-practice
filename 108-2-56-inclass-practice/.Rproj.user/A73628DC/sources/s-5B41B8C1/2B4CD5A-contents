---
title: '20200506'
author: "Zack Lin"
date: "2020/5/7"
output: html_document
---
4.5 On logical class
邏輯向量間（即「要/不要」向量）的操作主要是以下幾個：

&: AND

|: OR
```{r}
example <- list(
  name=c("小明","小花","小新","美美"),
  height=c(175,166,170,160),
  weight=c(77,NA,60,43),
  birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
  hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
  residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
  allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
  bloodType=c("A","B","B","O")
)
```

```{r}
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <- 
  stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <- 
  example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- 
  example$residence %in% set_TaipeiMetro
```
誰喜歡美食且血型為B型

```{r}
str(example[c("name","hobby","bloodType")])

example$name[
    pick_loveFood & pick_bloodB
  ]
```


```{r}
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")

# Also vectorised over pattern
str_detect("aecfg", letters)

# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
```
4.6 On character class
這節使用stringr套件，同時也有一小部份用到glue套件，請先下載安裝。
```{r}
library(stringr)
library(glue)
```
對character vector每個元素進行部份資訊粹取：

學號“410873002”，其中108是入學年，73是學系碼。 對100學年以後學生學系碼是固定在「第5、6位元」。
```{r}
str_sub("410873002", 5, 6)
```
地址幾號: “大學號151號”，只知道號碼在「號」這字前面，但它會是第幾個位元不知道。

使用Regular Expression (regex, 正規表示式)
如何讀入“民國108年12月5日”、“民國98年10月5日”
```{r}
lubridate::ymd(
  c("民國108年12月5日","民國98年10月5日")
)
```
lubridate對年只有西元年的概念。
要能想辦法把上面的“108”,“98”取出加上1911。

lubridate裡的字串日期時間判斷採取的策略是「忽略非數字文字」只以「數字組合」（還允許各地習慣使用的文字，如March, Mar都是3月的意思）判斷時間，所以以下幾個都可以產生「西元」“2019-12-05”:
```{r}
lubridate::ymd(
  c(
    "民國2019年12月05日",
    "馬丁2019的12課05muydifícil",
    "助教2019Emily12解說05真棒",
    "2019R12課程05すごい",
    "R程式2019的12期中考05とても変態"
  )
)
```
然而即使忽略非數字文字，三個數字的組合誰是年？月？日？依然受每個國家日期書寫習慣影響，所以有時還是可能會有誤判。

4.6.1 Regular expression(regex)

一種廣義描述所要字串規律的表示法，分成兩部份：

target pattern: 指對取出字串的描述。如“108”,“98”是我們想取出的字串。我們可以說目標是，
「0-9的字元2-3個」: [:digit:]{2,3}或[0-9]{2,3}
target location description:
指target位置的情境描述。如“民國108年”,“民國98年”，我們可以說，
target前面是「民國」後面是「年」: (?<=民國)target_pattern(?=年)
合成regex：(?<=民國)[0-9]{2,3}(?=年)

```{r}
str_extract_all(
  c("民國108年12月5日","民國98年10月5日"),
  "(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list 

str_extract(
  c("民國108年12月5日","民國98年10月5日"),
  "(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector 
```
4.6.2 組合alternat
用來製做一台吃角子老虎，它能夠包含你要的所有可能target出象。吃角子老虎由數條reel strip組成，每一條strip可以有以下幾種設計

固定字元/組：單寫一個字組或字元，表示那個strip固定不動只有一個出象，例如：2表示只有“2”一個出象，櫻桃只有“櫻桃”一個出象。
```{r}
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
```
字「群」組合(..|..|..): strip上的出象會出現一組字時用，如“AB|ab”, 可以產生“AB”或“ab”兩種出象。

字群組合規則若很單純前後沒有接其他描述則( )可不寫
```{r}
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")

str_view_all(studentIds, "107|108") # 可不寫()

# 是否來自107或108學屆
str_detect(studentIds, "107|108")
```
字「元」組合[]: strip上的出象「均」是一個字「元」時用，如[af78]可以產生“a”,“f”,“7”,“8”四種字元出象。
幾種常見的字元模版：[0-9](或[:digit:])，[a-z](或[:lower:])，[A-Z](或[:upper:]),[0-9a-zA-Z](或[:alnum:])
```{r}
Ids <- c("A283743192","B829103720","A10920402","C291022384")

str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C

str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
```
將設定好的reel strips依你要的順序排好就是你的regex slot machine, 它可以用來驗證字串裡頭是否出現來自你regex slot machine的某些組合。
```{r}
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
```

```{r}
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
  c(claimA,claimB,claimC),
  pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
  c(claimA,claimB,claimC),
  pattern=myRegexSlotMachine
)
```






```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:


```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
