---
title: '20200415'
author: "Zack Lin"
date: "2020/4/15"
output: html_document
---
4.1.2.3 用「要/不要」邏輯向量選[c(T,T,F,...)]
```{r}
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選：
length(vectorExample)

vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
```
```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )
# 有多少位置可選：
length(listExample)


str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
```
```{r}
str(listExample)
```
以下兩個都是表面都是選取“學期”:
```{r}
get1 <- listExample[["學期"]]#拿出來
get1 <- listExample$`學期`#拿出來

get2 <- listExample["學期"]#只留下
```
[[]]: 拿出某個物件值。listExample[["學期"]]將listExample裡的“學期”物件值拿出來。
```{r}
get1 # 學期拿出來，有3個元素的list
str(get1)
```
[]: 留下某個物件值。listExample["學期"]「只留下」listExample裡的“學期”物件值。
```{r}
get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2)
```

##get1取出
```{r}
get1$`108-1`->get1_layer1 #layer1
str(get1_layer1)
```
```{r}
get_layer1[[1]]->get1_layer2 #layer2
str(get_layer2)
```
```{r}
get1_layer2$teacher
```
```{r}
get1 <-listExample[["學期"]]#拿出來
get1$`108-1`->get1_layer1#layer_1
get1_layer1[[1]]->get1_layer2#layer_2
get1_layer2$teacher

listExample[["學期"]]$`108-1`[[1]]$teacher
```
##get2取出
```{r}
get2 <-listExample["學期"]#只留下
get2_layer1 <-get2[[1]] #get$`學期`;get2[["學期"]]
get2_layer2 <-get2_layer1[["108-1"]]
get2_layer3 <-get2_layer2[[1]]
get2_layer3$teacher

```
list應用
今明兩日台北市、新北市氣溫：
```{r}
today <- list(
  list("台北市",
       highest_temp=c(highest_temp = 25),
       lowest_temp=c(lowest_temp = 18)),
  list("新北市",
       highest_temp=c(highest_temp = 24),
       lowest_temp=c(lowest_temp = 15)))

tomorrow <- list(
  list("台北市",
       highest_temp=c(highest_temp = 25),
       lowest_temp=c(lowest_temp = 18)),
  list("新北市",
       highest_temp=c(highest_temp = 24),
       lowest_temp=c(lowest_temp = 15)))

weather <- list(today,tomorrow)

print(weather)
```
選出新北市今明最高溫
```{r}
weather[[1]][[2]][[2]] # 今天/新北市/highest_temp
weather[[2]][[2]][[2]] # 明天/新北市/highest_temp
```



4.2 新增/替換/刪除元素
元素提取[.],[[.]],$.也可用來進行元素「值」的修改與新增, 使用方法為：

obj[.] <- value
obj[[.]] <- value
obj$. <- value
若.所指定的元素不存在，則為「新增」。

若.所指定的元素存在，則為「修改」。
```{r}
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
```
增加一個“Johnson”使用[[.]]<-。

使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”。
```{r}
library(lubridate)
list1 <- 
  list(
    list(
      name="Jack",
      birthday=ymd("1998-03-21"),
      status=c(height=177, weight=80)
    )
  )
print(list1)
#str(list1)
```
```{r}
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")

# 新增資料
list1[[2]] <- list(
  name="Mary",
  birthday=ymd("1998-08-24")
)
print(list1)
#str(list1)
```
替Mary依Jack的記錄方式增加身高163，體重45。

將Jack的身高改成176。
```{r}
list1[[2]]$status<-(
  status=c(height=163, weight=45)
)

list1[[1]]$status$height<-176
print(list1)
```

使用[.] <-

由於[.]會保留母層結構，所以<-右側要使用和母層相同的型態設定：

母層若為list，則需用list(...)方式增加。

母層若為atomic vector，則用c(...)方式增加。
```{r}
list1[[1]][["age"]] <- 21
list1[[2]]["age"] <- list(21)

# 改變「一個」時，使用[[ ]]比較不會錯。
str(list1)
```

```{r}
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)

str(list1)
```


```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )
# 有多少位置可選：
length(listExample)
```
進行以下任務：

108-1新增一個“產業經濟學”。

產業經濟學，同時加上教師Wen及成績88。
```{r}
listExample$`學期`$`108-1`[[2]]<- #不用加list、student
  list(
    name="產業經濟學",
    teacher="Wen",
    grade=88
  )
  str(listExample)
```
```{r}
listExample$`學期`$`108-1`[[2]]<-list(
  teacher="Wen",
  grade=88
)
str(listExample)
```


刪除可以使用[- c(數字位置)]

只能「一個」中括號（[[.]]不能接受負數值）
只能用負數值，不能用元素名稱。
```{r}
print(a)
a[-c(1,3)]
a[c(-2)]

print(a)
a[-c(1,3)] -> a # 要回存才算真的刪除
```

```{r}
library(lubridate)
list1 <- 
  list(
    list(
      name="Jack",
      birthday=ymd("1998-03-21"),
      status=c(height=177, weight=80)
    ),
    list(
      name="Mary",
      birthday=ymd("1998-08-24"),
      status=c(height=163, weight=45),
      age=21,
      bloodType="AB"
    )
  )
str(list1)
```
刪除Jack的status.

刪除Mary的status, blookType.
```{r}

```

```{r}
library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/od/data/api/54DDDC93-589C-4858-9C95-18B2046CC1FC?$format=json", simplifyDataFrame = F) -> newTaipeiYouBike
```





```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
