factor(studentHeights)
studentHeights<-levels(studentHeights)
studentHeights
# studentHeight
factor(studentHeights)
studentHeights<-levels(studentHeights)
studentHeights
# studentHeight
factor(studentHeights)
studentHeights<-levels(studentHeights)
studentHeights
# studentHeight
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
print(studentHeights)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
# Chunk 2: data1
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
print(studentHeights)
factor(studentHeights)
studentHeights<-levels(studentHeights)
semester <-
factor(
studentHeights$學年度,
ordered=TRUE
)
# studentHeight
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
print(studentHeights)
factor(studentHeights)
studentHeights<-levels(studentHeights)
semester <-
factor(
studentHeights$`學年度`,
ordered=TRUE
)
# studentHeight
factor(studentHeights)
studentHeights<-levels(studentHeights)
semester <-
factor(
studentHeights$`學年度`,
ordered=TRUE
)
semester
# studentHeight
factor(studentHeights)
studentHeights<-levels(studentHeights)
semester <-
factor(
studentHeights$`學年度`,
ordered=TRUE
)
str(semester)
# studentHeight
covid19$年齡層
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
factor(studentHeights)
studentHeights<-levels(studentHeights$`學年度`)
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, increasing=T)
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeight
knitr::opts_chunk$set(echo = TRUE)
str(transcript100to103)
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
print(semesterranking)
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
print(semesterranking)
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
print(semesterranking)
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
print(semesterranking)
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
print(semesterranking)
# studentHeights
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
print(semesterranking)
# studentHeights
knitr::opts_chunk$set(echo = TRUE)
str(example)
pick_above170 <- example$height >= 170
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
#pick_after98 <-
#example$birthday >= lubridate::ymd("1998-01-01")
#set_TaipeiMetro <- c("Taipei","New Taipei")
#pick_fromTaipeiMetro <-
#example$residence %in% set_TaipeiMetro
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
#pick_na <- is.na(example$weight)
#pick_after98 <-
#example$birthday >= lubridate::ymd("1998-01-01")
#set_TaipeiMetro <- c("Taipei","New Taipei")
#pick_fromTaipeiMetro <-
#example$residence %in% set_TaipeiMetro
#str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
#pick_na <- is.na(example$weight)
#pick_after98 <-
#example$birthday >= lubridate::ymd("1998-01-01")
#set_TaipeiMetro <- c("Taipei","New Taipei")
#pick_fromTaipeiMetro <-
#example$residence %in% set_TaipeiMetro
#str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
#pick_na <- is.na(example$weight)
#pick_after98 <-
#example$birthday >= lubridate::ymd("1998-01-01")
#set_TaipeiMetro <- c("Taipei","New Taipei")
#pick_fromTaipeiMetro <-
#example$residence %in% set_TaipeiMetro
print(pick_above170)
#str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
#pick_na <- is.na(example$weight)
#pick_after98 <-
#example$birthday >= lubridate::ymd("1998-01-01")
#set_TaipeiMetro <- c("Taipei","New Taipei")
#pick_fromTaipeiMetro <-
#example$residence %in% set_TaipeiMetro
print(pick_loveFood)
#str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
#pick_after98 <-
#example$birthday >= lubridate::ymd("1998-01-01")
#set_TaipeiMetro <- c("Taipei","New Taipei")
#pick_fromTaipeiMetro <-
#example$residence %in% set_TaipeiMetro
print(pick_na)
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`, decreasing=F)
semesterranking
# studentHeight
#str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
print(pick_na)
library(stringr)
library(glue)
#str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
print(pick_na)
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
#sort(
#str_sub(char2,1,1)
)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
#sort(
#str_sub(char2,1,1)
#)
#sort(
#str_sub(char2,2,2)
#)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <-
factor(covid19$`縣市`)
covid19$`性別` <-
factor(covid19$`性別`)
covid19$`是否為境外移入` <-
factor(
covid19$`是否為境外移入`
)
# 可排序類別資料：年齡層
covid19$`年齡層` <-
factor(
covid19$`年齡層`,
ordered=TRUE
)
levels(covid19$`縣市`)
levels(covid19$`性別`)
levels(covid19$`是否為境外移入`)
# 可排序類別資料：年齡層
covid19$`年齡層` <-
factor(
covid19$`年齡層`,
ordered=TRUE
)
covid19$`年齡層`
covid19$`年齡層`
levels(covid19$`年齡層`)
levels(covid19$`性別`)
covid19$`性別` <- factor(covid19$`性別`, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
levels(covid19$`年齡層`)
#covid19$`年齡層`
levels(covid19$`年齡層`)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$`年齡層` <-
factor(
covid19$`年齡層`, names(startingAges)
)
levels(covid19$`年齡層`)
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`)
semesterranking
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`)
semesterranking
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
#semesterranking<- sort(`學年度`)
# studentHeight
knitr::opts_chunk$set(echo = TRUE)
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
#semesterranking<- sort(`學年度`)
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
semesterranking<- sort(`學年度`)
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
#semesterranking<- sort(`學年度`)
# studentHeight
factor(studentHeights)
`學年度`<-levels(studentHeights$`學年度`)
#semesterranking<- sort(`學年度`)
# studentHeight
factor(studentHeights)
#`學年度`<-levels(studentHeights$`學年度`)
#semesterranking<- sort(`學年度`)
# studentHeight
factor(studentHeights)
levels(studentHeights$`學年度`)
#semesterranking<- sort(`學年度`)
# studentHeight
factor(studentHeights)
sort(studentHeights$`學年度`)
#semesterranking<- (`學年度`)
# studentHeight
factor(studentHeights)
sort(studentHeights$`學年度`)
#semesterranking<- (`學年度`)
# studentHeight
factor(studentHeights)
sort(studentHeights$`學年度`)
#semesterranking<- (`學年度`)
# studentHeight
factor(studentHeights)
sort(studentHeights$`學年度`)
#semesterranking<- (`學年度`)
# studentHeight
